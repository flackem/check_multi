#! @PERL@ -w -I ..
#
# Process Tests via check_multi
# thanks to Ton Voon for his persistency on testing ;)
#
use strict;
use Test::More;
use FindBin;
use lib "$FindBin::Bin";
use NPTest;
use testopts;

my $t;

#--- add $libexec_dir to PATH to be sure that plugins will be called from libexec_dir
my $libexec_dir="@libexecdir@";
my $plugin_path="@plugin_path@";
$ENV{PATH}="$libexec_dir:$plugin_path:$ENV{PATH}";

#--- check needed plugins for tests
my @plugins=(
	"echo",
	"@PERL@",
);
foreach my $plugin (@plugins) {
	my $path_to_plugin=`which $plugin`; chomp $path_to_plugin;
	if (! -x "$path_to_plugin") {
		plan skip_all => "tests because component $plugin not found or not executable as \'$path_to_plugin\'";
	}
}

plan tests => 114;

my $result;
my $testopts=testopts::get_testopts;
#-------------------------------------------------------------------------------
#--- check_multi version -------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -V"
);
print '-'x 80 ; print "\n";
print $result->output; print "\n";
print '-'x 80 ; print "\n";
is(
	$result->return_code, 
	3, 
	"check_multi version - RC3"
);
like(
	$result->output,
	'/^Version: check_multi_\d{1}\.\d{2}_\d{3}_\d{4}-\d{2}-\d{2}-\d{2}:\d{2}\n'.
	'configure.*$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- ENV vars MULTI_... via command --------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -r 1+4 $testopts -x 'command [ echo ] = echo \"Hello World\"' -x 'command [ env ] = env | grep ^MULTI_ | sort' -r 1+4",
);
is(
	$result->return_code, 
	0, 
	"environment variables assignment via command - RC0"
);
like(
	$result->output,
	'/^OK - 2 plugins checked, 2 ok\n'.
	'\[ 1\] echo Hello World\n'.
	'\[ 2\] env MULTI_1=Hello World\n'.
	' MULTI_1_LABEL=OK\n'.
	' MULTI_1_NAME=echo\n'.
	' MULTI_1_RC=0\n'.
	' MULTI_1_RC_LABEL=OK\n'.
	' MULTI_1_STATE=0\n'.
	' MULTI_2_NAME=env\n'.
	'.*$/s',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- ENV vars MULTI_... via eval -----------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -x 'eeval [ echo ] = \"Hello World\";' -x 'command [ env ] = env | grep ^MULTI_ | sort' -r 1+4",
);
is(
	$result->return_code, 
	0, 
	"environment variables assignment via eeval - RC0"
);
like(
	$result->output,
	'/^OK - 2 plugins checked, 2 ok\n'.
	'\[ 1\] echo Hello World\n'.
	'\[ 2\] env MULTI_1=Hello World\n'.
	' MULTI_1_LABEL=OK\n'.
	' MULTI_1_NAME=echo\n'.
	' MULTI_1_RC=0\n'.
	' MULTI_1_RC_LABEL=OK\n'.
	' MULTI_1_STATE=0\n'.
	' MULTI_2_NAME=env\n'.
	'.*$/s',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- valid name option -------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -n 'test 234' -x 'command [ procs ] = echo \"PROCS OK: 99 processes\"'"
);
is(
	$result->return_code, 
	0, 
	"valid name option - RC0"
);
like(
	$result->output,
	'/^test 234 OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] procs PROCS OK: \d+ processes|check_multi::check_multi::plugins=1 time=\d+$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- invalid name option -----------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -n test[ -x 'command [ procs ] = echo \"PROCS OK: 99 processes\"'"
);
is(
	$result->return_code, 
	3, 
	"invalid name option - RC3"
);
like(
	$result->output,
	'/^check_multi error: name \'test\[\' invalid - \[ brackets \] are not allowed/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- simple OK output with 1 plugin --------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -x 'command [ procs ] = echo \"PROCS OK: 99 processes\"'"
);
is(
	$result->return_code, 
	0, 
	"default report option - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] procs PROCS OK: \d+ processes|check_multi::check_multi::plugins=1 time=\d+$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- parse_lines: simple command with continuation line and backslash ----------
#-------------------------------------------------------------------------------
`echo 'command [ two_lines ] = \\' >  ./tmp/test.cmd`;
`echo 'echo \"two lines\"'         >> ./tmp/test.cmd`;
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -f ./tmp/test.cmd"
);
is(
	$result->return_code, 
	0, 
	"command with backslashed continuation line - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] two_lines two lines|check_multi::check_multi::plugins=1 time=\d+$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- parse_lines: simple command with continuation lines without backslash -----
#-------------------------------------------------------------------------------
`echo 'command [ two_lines ] =' >  ./tmp/test.cmd`;
`echo 'echo \"two lines\"'      >> ./tmp/test.cmd`;
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -f ./tmp/test.cmd"
);
is(
	$result->return_code, 
	0, 
	"command with continuation line without backslash - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] two_lines two lines|check_multi::check_multi::plugins=1 time=\d+$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- parse_lines: simple command with continuation lines and empty line --------
#-------------------------------------------------------------------------------
`echo 'command [ two_lines ] =' >  ./tmp/test.cmd`;
`echo                           >> ./tmp/test.cmd`;
`echo 'echo \"two lines\"'      >> ./tmp/test.cmd`;
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -f ./tmp/test.cmd"
);
is(
	$result->return_code, 
	0, 
	"command with (empty) continuation line - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] two_lines two lines|check_multi::check_multi::plugins=1 time=\d+$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- parse_lines: simple command with continuation lines and comment line ------
#-------------------------------------------------------------------------------
`echo 'command [ two_lines ] =' >  ./tmp/test.cmd`;
`echo ' # this is a comment'    >> ./tmp/test.cmd`;
`echo 'echo \"two lines\"'      >> ./tmp/test.cmd`;
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -f ./tmp/test.cmd"
);
is(
	$result->return_code, 
	0, 
	"command with comment and continuation line - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] two_lines two lines|check_multi::check_multi::plugins=1 time=\d+$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- parse_lines: simple command with continuation lines and comment line --------
#-------------------------------------------------------------------------------
`echo 'command [ two_lines ] =' >  ./tmp/test.cmd`;
`echo '# this is a comment line with a trailing backslash \\' >> ./tmp/test.cmd`;
`echo 'echo \"two lines\"'      >> ./tmp/test.cmd`;
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -f ./tmp/test.cmd"
);
is(
	$result->return_code, 
	0, 
	"command with comment with trailing backslash and continuation lines - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] two_lines two lines|check_multi::check_multi::plugins=1 time=\d+$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- report option 0 -----------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=0+4 -x 'command [ procs ] = echo \"PROCS OK: 99 processes\"'"
);
is(
	$result->return_code, 
	0, 
	"report option 0 (all states shown) - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 0 critical, 0 warning, 0 unknown, 1 ok\n'.
	'\[ 1\] procs PROCS OK: \d+ processes$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- report option 1 -----------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -x 'command [ procs ] = (echo \"PROCS WARNING: 99 processes\"; exit 1)'"
);
is(
	$result->return_code, 
	1, 
	"report option 1 (non-OK service names in state list) - RC1"
);
like(
	$result->output,
	'/^WARNING - 1 plugins checked, 1 warning \(procs\)\n'.
	'\[ 1\] procs PROCS WARNING: \d+ processes$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- report option 2 -----------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=2 -x 'command [ procs ] = echo \"PROCS OK: 99 processes\"'"
);
is(
	$result->return_code, 
	0, 
	"report option 2 (HTML) - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 0 critical, 0 warning, 0 unknown, 1 ok\n'.
	'<script language=\'JavaScript\'> function Toggle.*PROCS OK: \d+ processes.*div>$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- report option 2 -----------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=2 -s html_ascii_notification=1 -x 'command [ procs ] = echo \"PROCS OK: 99 processes\"'"
);
is(
	$result->return_code, 
	0, 
	"report option 2 (HTML) - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 0 critical, 0 warning, 0 unknown, 1 ok\n'.
	'<script language=\'JavaScript\'> function Toggle.*PROCS OK: \d+ processes.*div><!---\nASCII_NOTIFICATION_START\n.*\nASCII_NOTIFICATION_END\n---!>/s',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- report option 4 - eval error shown in [ brackets ] ------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -x 'eeval [ error ] = \";'"
);
is(
	$result->return_code, 
	1, 
	"report option 4 [eval error message] - RC3"
);
like(
	$result->output,
	'/^WARNING - 1 plugins checked, 1 warning \(error\)\n'.
	'\[ 1\] error \[Can\'t find string terminator.*\]/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- report option 16 ----------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=16 -x 'command [ eins ] = echo 1'"
);
is(
	$result->return_code, 
	0, 
	"report option 16 (state in output and in long plugin output) - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 0 critical, 0 warning, 0 unknown, 1 ok\n'.
	'\[ 1\] eins 1\n'.
	'\[OK\] TRUE     - 1\n'.
	'\[UN\] FALSE    - COUNT\(UNKNOWN\) > 0\n'.
	'\[WA\] FALSE    - COUNT\(WARNING\) > 0\n'.
	'\[CR\] FALSE    - COUNT\(CRITICAL\) > 0$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- report option 16+2 (HTML) -------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=16+2 -x 'command [ eins ] = echo 1'"
);
is(
	$result->return_code, 
	0, 
	"report option 16 (state in output and in long plugin output / HTML) - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 0 critical, 0 warning, 0 unknown, 1 ok\n'.
	'.*OK.*UNKN.*WARN.*CRIT.*/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- report option 1 with extra state option -----------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1 -x 'command [ eins ] = (echo 1; exit 1)' -w 'count(WARNING)==1'"
);
is(
	$result->return_code, 
	1, 
	"report option 0 (extra warning state is shown) - RC1"
);
like(
	$result->output,
	'/^WARNING - 1 plugins checked, 1 warning \(eins\) \[WARNING]\n'.
	'\[ 1\] eins 1\n'.
	'\[WA\] TRUE     - count\(WARNING\)==1$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- report option 64 ----------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=64 -x 'command [ eins ] = echo \"1|eins=1\"' -x 'command [ zwei ] = echo \"2|zwei=2\"'"
);
is(
	$result->return_code, 
	0, 
	"report option 64 (state in front of output) - RC0"
);
like(
	$result->output,
	'/^OK - 2 plugins checked, 0 critical, 0 warning, 0 unknown, 2 ok\n'.
	'\[ 1\] eins OK 1\n'.
	'\[ 2\] zwei OK 2$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- report option 128 with explicit host definition ---------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+2+8+128 -s HOSTNAME=thishost -x 'command [ eins ] = echo \"1|eins=1\"'"
);
is(
	$result->return_code, 
	0, 
	"report option 128 (pnp4nagios link) - RC0"
);
like(
	$result->output,
	'/^check_multi OK - 1 plugins checked, 1 ok\n'.
	'.*pnp4nagios.*host=thishost/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- report option 128 with NAGIOS_HOSTNAME env variable -----------------------
#-------------------------------------------------------------------------------
$ENV{uc("@nagios_name@")."_HOSTNAME"}="thishost";
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+2+8+128 -x 'command [ eins ] = echo \"1|eins=1\"'"
);
is(
	$result->return_code, 
	0, 
	"report option 128 (pnp4nagios link) with env var NAGIOS_HOSTNAME - RC0"
);
like(
	$result->output,
	'/^check_multi OK - 1 plugins checked, 1 ok\n'.
	'.*pnp4nagios.*host=thishost/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- report option 256 ---------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=256 -x 'command [ proc ] = echo \"PROCS OK: 99 processes\"'"
);
is(
	$result->return_code, 
	0, 
	"report option 256 (XML output) - RC0"
);
#<?xml version="1.0"?>
#<?xml-stylesheet type="text/xsl" href="extinfo.xsl"?>
#<div id="check_multi_xml" style='display:none'>
#<check_multi>
#	<CHILD>
#		<no>0</no>
#		<command>none</command>
#		<endtime>1282402937.85597</endtime>
#		<hash>hamX.fjak00C6</hash>
#		<nallchecks>1</nallchecks>
#		<name></name>
#		<names>_0_head_none_1_proc_command_echo_PROCS_OK_99_processes_</names>
#		<nchecks>1</nchecks>
#		<number>0</number>
#		<rc>0</rc>
#		<runtime>0.00392317771911621</runtime>
#		<sleeped>0</sleeped>
#		<starttime>1282402937.85206</starttime>
#		<timeouttime>1282402997.85206</timeouttime>
#		<type>head</type>
#		<output>0 critical, 0 warning, 0 unknown, 1 ok</output>
#	</CHILD>
#	<CHILD>
#		<no>1</no>
#		<command>echo \"PROCS OK: 99 processes\"</command>
#		<displayed>1</displayed>
#		<endtime>1282402937.85581</endtime>
#		<error>report_xml: XML element critical not found</error>
#		<name>proc</name>
#		<number>1</number>
#		<output>"PROCS OK: 99 processes"</output>
#		<plugin>echo</plugin>
#		<pplugin>echo</pplugin>
#		<process_perfdata>1</process_perfdata>
#		<rc>0</rc>
#		<runtime>0.00369381904602051</runtime>
#		<starttime>1282402937.85212</starttime>
#		<type>command</type>
#	</CHILD>
#</check_multi>
#</div>
like(
	$result->output,
	'/^<\?xml version'.
	'.*<no>0<\/no>'.
	'.*<rc>0<\/rc>'.
	'.*<no>1<\/no>'.
	'.*<command>echo.*<\/command>'.
	'.*<output>PROCS.*<\/output>'.
	'.*<type>command<\/type>.*$/s',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi encode  (report option 16384) ---------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=16384+4 -x 'command [ encode ] = echo encode'",
);
is(
	$result->return_code, 
	0, 
	"report option 16384 - encode commands - RC0"
);
like(
	$result->output,
	'/command%20%5B%20encode%20%5D%20%3D%20echo%20encode%0A/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi hide OK states (report option 32768) --------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=32768+4 -x 'command [ OK ] = (echo 0; exit 0)' -x 'command [ WARNING ] = (echo 1; exit 1)'",
);
is(
	$result->return_code, 
	1, 
	"report option 32768 - hide OK states - RC1"
);
like(
	$result->output,
	'/WARNING - 2 plugins checked, 0 critical, 1 warning, 0 unknown, 1 ok\n'.
	'\[ 2\] WARNING 1/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi hide OK states (report option 32770) --------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=32768+2+4 -x 'command [ OK ] = (echo 0; exit 0)'",
);
is(
	$result->return_code, 
	0, 
	"report option 32768+2 - hide OK states in HTML mode - RC1"
);
like(
	$result->output,
	'/OK - 1 plugins checked, 0 critical, 0 warning, 0 unknown, 1 ok\n'.
	'.*OK/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi decode (of encoded command) -----------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -f command%20%5B%20encode%20%5D%20%3D%20echo%20encode%0A",
);
is(
	$result->return_code, 
	0, 
	"decode encoded command - RC0"
);
like(
	$result->output,
	'/OK - 1 plugins checked, 1 ok\n'. 
	'\[ 1\] encode encode\|check_multi::check_multi::plugins=1 time=\d+\.\d+/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi corrects 0 permissions at tmp_dir -----------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"rmdir ./tmpdir 2>/dev/null; mkdir ./tmpdir; chmod 000 ./tmpdir; @PERL@ ../check_multi -r 1 -s dont_be_paranoid=1 -s tmp_dir=\"./tmpdir\" -x \'command [ tmpdir ] = ls -ld ./tmpdir'"
);
is(
	$result->return_code, 
	0, 
	"tmp_dir creation with correcting wrong permissions - RC0",
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] tmpdir drwxrwxrwt.*/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi does nothing with correct permissions on tmp_dir --------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"rmdir ./tmpdir 2>/dev/null; mkdir ./tmpdir; chmod 1777 ./tmpdir; @PERL@ ../check_multi -r 1 -s dont_be_paranoid=1 -s tmp_dir=\"./tmpdir\" -x \'command [ tmpdir ] = ls -ld ./tmpdir'"
);
is(
	$result->return_code, 
	0, 
	"tmp_dir creation with correct permissions - RC0",
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] tmpdir drwxrwxrwt.*/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi inherits report option ----------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi -r 1 -s dont_be_paranoid=1 -s tmp_dir=\"./tmp\" -x \'command [ eins ] = @PERL@ ../check_multi -s dont_be_paranoid=1 -s tmp_dir=\"./tmp\" -x \"eeval [ zwei ] = 2\"\'"
);
is(
	$result->return_code, 
	0, 
	"recursive (with inherited report option) - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] eins OK - 1 plugins checked, 1 ok\n'.
	' \[ 1\] zwei 2$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi inherits report option with mask ------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -r 1+8 -x \'command [ eins ] = @PERL@ ../check_multi -s report_inherit_mask=1 -s dont_be_paranoid=1 -s tmp_dir=\"./tmp\" -s extended_perfdata=0 -x \"eeval [ zwei ] = 2\"\'"
);
is(
	$result->return_code, 
	0, 
	"recursive (with inherited report option and mask) - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] eins OK - 1 plugins checked, 1 ok\n'.
	' \[ 1\] zwei 2\|check_multi::check_multi::plugins=1 time=\d+\.\d+ $/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi recursive -----------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -x \'command [ child1 ] = @PERL@ ../check_multi -s dont_be_paranoid=1 -s tmp_dir=\"./tmp\" -x \"command [ grandchild1 ] = echo g1\"\'"
);
is(
	$result->return_code, 
	0, 
	"recursive (check_multi calls check_multi) - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] child1 OK - 1 plugins checked, 1 ok\n'.
	' \[ 1\] grandchild1 g1$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- overloading ---------------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -x 'command [ eins ] = echo original' -x 'command [ eins ] = echo overloaded'",
);
is(
	$result->return_code, 
	0, 
	"overloading commands - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] eins overloaded$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- killing me softly - checking signal handler -------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -x 'eeval [ killing_me_HUPly ] = kill 1, \$\$;'",
);
is(
	$result->return_code, 
	3, 
	"testing signal handler - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok \[HUP generated at line 1 in.*\]\n'.
	'\[ 1\] killing_me_HUPly $/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- output / head -------------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -x 'command [ procs ] = echo \"PROCS OK: 99 processes\"' -x 'output [ head ] = \"%.20s processes running\",(split(/\\s+/,\"\$procs\$\"))\[2\]'",
);
is(
	$result->return_code, 
	0, 
	"custom output for header line - RC0"
);
like(
	$result->output,
	'/\\d+ processes running\n'.
	'\[ 1\] procs PROCS OK: \\d+ processes$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi attribute -----------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4+8 -x 'command [ with_perfdata ] = echo \"eins\|eins=1\"' -x 'attribute [ with_perfdata::process_perfdata ] = 0'",
);
is(
	$result->return_code, 
	0, 
	"changes child check attributes - RC0"
);
like(
	$result->output,
	'/OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] with_perfdata eins\|check_multi::check_multi::plugins=1 time=[\d\.]+ $/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi attribute with double quotes ----------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4+8 -x 'attribute [ string ] = \"one two\"' -x 'eeval [ out ] = \"\$string\$\"'",
);
is(
	$result->return_code, 
	0, 
	"attribute with blank and double quotes - RC0"
);
like(
	$result->output,
	'/OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] out one two\|check_multi::check_multi::plugins=1 time=[\d\.]+ $/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi attribute sort order (severity) -------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -x 'command [ eins ] = echo \"eins\"' -x 'attribute [ eins::warning ] = eins =~ /eins/' -x 'attribute [ eins::unknown ] = eins =~ /eins/'",
);
is(
	$result->return_code, 
	1, 
	"child check attributes in correct (severity) order - RC1"
);
like(
	$result->output,
	'/WARNING - 1 plugins checked, 1 warning \(eins\)\n'.
	'\[ 1\] eins eins \[UNKNOWN: matched rule \'eins =\~ \/eins\/\', WARNING: matched rule \'eins =\~ \/eins\/\'\]$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi attribute sort order (severity) with RC -----------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -x 'command [ zwei ] = (echo \"zwei\"; exit 2)' -x 'attribute [ zwei::warning ] = zwei =~ /zwei/' -x 'attribute [ zwei::unknown ] = zwei =~ /zwei/'",
);
is(
	$result->return_code, 
	2, 
	"child check attributes in correct (severity) order with RC - RC2"
);
like(
	$result->output,
	'/CRITICAL - 1 plugins checked, 1 critical \(zwei\)\n'.
	'\[ 1\] zwei zwei \[UNKNOWN: matched rule \'zwei =\~ \/zwei\/\', WARNING: matched rule \'zwei =\~ /zwei/\'\]$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi attribute (check not found) -----------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -x 'command [ eins ] = echo eins' -x 'attribute [ zwei::warning ] = 0'",
);
is(
	$result->return_code, 
	0, 
	"changes child check attributes (child check not found) - RC0"
);
like(
	$result->output,
	'/OK - 1 plugins checked, 1 ok \[parse_header: attribute \[ zwei::warning \] can not be set: child check with name \'zwei\' not found\]\n'.
	'\[ 1\] eins eins$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi with instant execution ----------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"/usr/bin/perl ../check_multi $testopts -x 'command [ eins ] = (echo eins; exit 1)' -x 'command [ zwei ] = (echo zwei; exit 2)' -i eins",
);
is(
	$result->return_code, 
	1, 
	"instant execution of child check (feeded command reschedule) - RC1"
);
like(
	$result->output,
	'/^eins$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi with instant execution, wrong tag -----------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"/usr/bin/perl ../check_multi $testopts -x 'command [ eins ] = (echo eins; exit 1)' -x 'command [ zwei ] = (echo zwei; exit 2)' -i drei",
);
is(
	$result->return_code, 
	3, 
	"instant execution of child check, wrong tag - RC3"
);
like(
	$result->output,
	'/^UNKNOWN - tag \'drei\' not found for instant execution$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi attribute sets internal variable ------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1 -x 'eeval [ eins ] = \"zwei\"' -x 'attribute [ name ] = drei'",
);
is(
	$result->return_code, 
	0, 
	"changes global variables with attributes - RC0"
);
like(
	$result->output,
	'/drei OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] eins zwei$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi cumulate ------------------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -x 'cumulate [ two ] = (echo abc\ 123; echo def\ 456; echo abc\ 123; echo def\ 456; echo abc\ 123; echo def\ 456; exit 0)'",
);
is(
	$result->return_code, 
	0, 
	"cumulates data like top - RC0"
);
like(
	$result->output,
	'/OK - 2 plugins checked, 2 ok\n'.
	'\[ 1\] def 1368\n'.
	'\[ 2\] abc 369|'.
	'check_multi::check_multi::plugins=2 time=[\d\.]+ two::cumulate::def=1368 two::cumulate::abc=369 $/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi cumulate with floating point ----------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -x 'cumulate [ two ] = (echo abc\ 123.456; echo def\ 456.789; echo abc\ 123.123; echo def\ 456.456; echo abc\ 123.321; echo def\ 456.654; exit 0)'",
);
is(
	$result->return_code, 
	0, 
	"cumulates data like top - RC0"
);
like(
	$result->output,
	'/OK - 2 plugins checked, 2 ok\n'.
	'\[ 1\] def 1369.899\n'.
	'\[ 2\] abc 369.9|'.
	'check_multi::check_multi::plugins=2 time=[\d\.]+ two::cumulate::def=1369.899 two::cumulate::abc=369.9 $/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi object drops illegal characters -------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -x 'eeval [ string_with_carriage_return ] = \"Hello\rWorld!\"' -r 1+4",
);
is(
	$result->return_code, 
	0, 
	"illegal characters are dropped - RC0"
);
like(
	$result->output,
	'/OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] string_with_carriage_return HelloWorld!/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi object deals with empty illegal character variable ------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -x 'eeval [ string_with_carriage_return ] = \"Hello\rWorld!\"' -r 1+4 -s illegal_chars=\"\"",
);
is(
	$result->return_code, 
	0, 
	"illegal character variable is empty - RC0"
);
like(
	$result->output,
	'/OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] string_with_carriage_return Hello\rWorld!/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi with invalid command line, no -s parameter --------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
        "@PERL@ ../check_multi $testopts -r 1 -s",
);
is(
	$result->return_code,
	3,
	"option s requires an argument - RC3",
);
like(
	$result->output,
	'/OK - 0 plugins checked,  \[Option s requires an argument.*\]/',
	"output correct",
);
#-------------------------------------------------------------------------------
#--- check_multi child, global timeout shorter than local timeout --------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -s TIMEOUT=5 -s timeout=10 -x 'command [ one ] = echo one'",
);
is(
	$result->return_code, 
	3, 
	"timeout check: global timeout shorter than local timeout - RC3"
);
like(
	$result->output,
	'/check_multi: error - child timeout 10s must not be greater than parent timeout 5s/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi child and global timeout --------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -s timeout=1 -s TIMEOUT=2 -s cancel_before_global_timeout=1 -x 'command [ one ] = ( sleep 2; echo one)' -x 'command [ two ] = echo two'",
);
is(
	$result->return_code, 
	3, 
	"timeout check: child one killed, child two cancelled - RC3"
);
like(
	$result->output,
	'/UNKNOWN - 2 plugins checked, 2 unknown \(one, two\)\n'.
	'\[ 1\] one  \[timeout encountered after 1s\]\n'.
	'\[ 2\] two UNKNOWN - execution cancelled due to global timeout \(2s\)/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi with invalid numerical tag ------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
        "@PERL@ ../check_multi $testopts -r 1 -x 'command [ 123 ] = echo 123'",
);
is(
	$result->return_code,
	3,
	"numerical tags are invalid - RC3",
);
like(
	$result->output,
	'/UNKNOWN - 0 plugins checked,  \[parse_lines: pure numerical tag \'123\' is invalid, no checks defined\]/',
	"output correct",
);
#-------------------------------------------------------------------------------
#--- check_multi info::pre and info::post commands -----------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
        "@PERL@ ../check_multi $testopts -r 1 -x 'command [ eins ] = echo eins' -x 'info [ eins::pre ] = null' -x 'info [ eins::post ] = zwei'",
);
is(
	$result->return_code,
	0,
	"info::pre and info::post commands - RC0",
);
like(
	$result->output,
	'/OK - 1 plugins checked, 1 ok\n\[ 1\] eins null\n eins\n zwei/',
	"output correct",
);
#-------------------------------------------------------------------------------
#--- check_multi info::pre for a non existing tag ------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
        "@PERL@ ../check_multi $testopts -r 1 -x 'command [ eins ] = echo eins' -x 'info [ zwei::pre ] = null'",
);
is(
	$result->return_code,
	0,
	"info [ tag::pre ] for a non existing tag - RC0",
);
like(
	$result->output,
	'/OK - 1 plugins checked, 1 ok \[parse_header: info \[ zwei::pre \] can not be set: child check with name \"zwei\" not found\]\n\[ 1\] eins eins/',
	"output correct",
);
#-------------------------------------------------------------------------------
#--- check_multi info::prost with invalid info part description, pre or post ---
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
        "@PERL@ ../check_multi $testopts -r 1 -x 'command [ eins ] = echo eins' -x 'info [ eins::prost ] = null'",
);
is(
	$result->return_code,
	0,
	"info [ tag::prost ] instead of info::post - RC0",
);
like(
	$result->output,
	'/OK - 1 plugins checked, 1 ok \[parse_header: info \[ eins::prost \]: invalid info type \"prost\", must begin with pre or post.\]\n\[ 1\] eins eins/',
	"output correct",
);
#-------------------------------------------------------------------------------
#--- check_multi info::pre_warning ---------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
        "@PERL@ ../check_multi $testopts -r 1 -x 'command [ eins ] = (echo eins; exit 1)' -x 'info [ eins::pre_warning ] = pre_warning' -x 'info [ eins::post_warning ] = post_warning'",
);
is(
	$result->return_code,
	1,
	"info::pre_warning and info::post_warning commands - RC0",
);
like(
	$result->output,
	'/WARNING - 1 plugins checked, 1 warning \(eins\)\n\[ 1\] eins pre_warning\n eins\n post_warning/',
	"output correct",
);
#-------------------------------------------------------------------------------
#--- check_multi info::pre_warning and pre -------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
        "@PERL@ ../check_multi $testopts -r 1 -x 'command [ eins ] = (echo eins; exit 1)' -x 'info [ eins::pre_warning ] = pre_warning' -x 'info [ eins::pre ] = pre'",
);
is(
	$result->return_code,
	1,
	"info::pre_warning and info::pre commands - RC0",
);
like(
	$result->output,
	'/WARNING - 1 plugins checked, 1 warning \(eins\)\n\[ 1\] eins pre_warning\n pre\n eins/',
	"output correct",
);
#-------------------------------------------------------------------------------
#--- check_multi info::pre_nok and pre -------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
        "@PERL@ ../check_multi $testopts -r 1 -x 'command [ eins ] = (echo eins; exit 1)' -x 'info [ eins::pre_nok ] = pre_nok' -x 'info [ eins::pre ] = pre'",
);
is(
	$result->return_code,
	1,
	"info::pre_nok and info::pre commands - RC0",
);
like(
	$result->output,
	'/WARNING - 1 plugins checked, 1 warning \(eins\)\n\[ 1\] eins pre_nok\n pre\n eins/',
	"output correct",
);
