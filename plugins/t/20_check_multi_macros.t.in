#! @PERL@ -w -I ..
#
# Process Tests via check_multi
# thanks to Ton Voon for his persistency on testing ;)
#

use strict;
use Test::More;
use FindBin;
use lib "$FindBin::Bin";
use NPTest;
use testopts;

my $t;

#--- add $libexec_dir to PATH to be sure that plugins will be called from libexec_dir
my $libexec_dir="@libexecdir@";
my $plugin_path="@plugin_path@";
$ENV{PATH}="$libexec_dir:$plugin_path:$ENV{PATH}";

#--- check needed plugins for tests
my @plugins=(
	"echo",
	"@PERL@",
);
foreach my $plugin (@plugins) {
	my $path_to_plugin=`which $plugin`; chomp $path_to_plugin;
	if (! -x "$path_to_plugin") {
		plan skip_all => "tests because component $plugin not found or not executable as \'$path_to_plugin\'";
	}
}

plan tests => 20;

my $result;
my $testopts=testopts::get_testopts;
#-------------------------------------------------------------------------------
#--- ENV vars MULTI_... via command --------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -x 'command [ echo ] = echo \"Hello World\"' -x 'command [ env ] = env | grep ^MULTI_ | sort' -r 1+4",
);
is(
	$result->return_code, 
	0, 
	"environment variables assignment via command - RC0"
);
like(
	$result->output,
	'/^OK - 2 plugins checked, 2 ok\n'.
	'\[ 1\] echo Hello World\n'.
	'\[ 2\] env MULTI_1=Hello World\n'.
	' MULTI_1_LABEL=OK\n'.
	' MULTI_1_NAME=echo\n'.
	' MULTI_1_RC=0\n'.
	' MULTI_1_RC_LABEL=OK\n'.
	' MULTI_1_STATE=0\n'.
	' MULTI_2_NAME=env\n'.
	'.*$/s',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- ENV vars MULTI_... via eval -----------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -x 'eeval [ echo ] = \"Hello World\";' -x 'command [ env ] = env | grep ^MULTI_ | sort' -r 1+4",
);
is(
	$result->return_code, 
	0, 
	"environment variables assignment via eeval - RC0"
);
like(
	$result->output,
	'/^OK - 2 plugins checked, 2 ok\n'.
	'\[ 1\] echo Hello World\n'.
	'\[ 2\] env MULTI_1=Hello World\n'.
	' MULTI_1_LABEL=OK\n'.
	' MULTI_1_NAME=echo\n'.
	' MULTI_1_RC=0\n'.
	' MULTI_1_RC_LABEL=OK\n'.
	' MULTI_1_STATE=0\n'.
	' MULTI_2_NAME=env\n'.
	'.*$/s',
	"output correct"
);

#-------------------------------------------------------------------------------
#--- environment macro ----------------------------------------------------------
#-------------------------------------------------------------------------------
$ENV{uc("@nagios_name@")."__HOST_CHECK_MULTI_TESTVAR"}="has a test value";
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -x 'command [ test_var ] = echo \$_HOST_CHECK_MULTI_TESTVAR\$'",
);
is(
	$result->return_code, 
	0, 
	"reading custom variable - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] test_var has a test value$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- macro which does not exist (complain_unknown_macros = 1) ------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -x 'command [ test_var ] = echo not there \$does_not_exist\$'",
);
is(
	$result->return_code, 
	0, 
	"non existing macro - complaining - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] test_var not there \[Macro \$does_not_exist\$ not found\]$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- macro which does not exist (complain_unknown_macros = 0) ------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -x 'command [ test_var ] = echo not there \$does_not_exist\$' -s complain_unknown_macros=0",
);
is(
	$result->return_code, 
	0, 
	"non existing macro - complaining - RC0"
);
like(
	$result->output,
	'/^OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] test_var not there$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- environment macro with 0 value --------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -s report=1+4 -x 'command [ test_var ] = echo 0' -x 'command [ read_test_var ] = echo \$test_var\$'",
);
is(
	$result->return_code, 
	0, 
	"reading custom variable - RC0"
);
like(
	$result->output,
	'/^OK - 2 plugins checked, 2 ok\n'.
	'\[ 1\] test_var 0\n'.
	'\[ 2\] read_test_var 0$/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi object cache macros - objects.cache does not exist ------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -x 'command [ hostgroup_members ] = echo \$hostgroup:members:hostgroup_name:linux-servers\$' -r 1+4 -s objects_cache=not.there",
);
is(
	$result->return_code, 
	3, 
	"object cache macro check - non existing objects.cache file - RC3"
);
like(
	$result->output,
	'/UNKNOWN - 1 plugins checked, 1 unknown \(hostgroup_members\) \[parse_objects_cache: error opening file not.there.*\]\n'.
	'\[ 1\] hostgroup_members/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi object cache macros with invalid object -----------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -x 'command [ invalid ] = echo \$invalid:members:hostgroup_name:linux-servers\$' -r 1+4 -s objects_cache=objects.cache",
);
is(
	$result->return_code, 
	3, 
	"object cache macro check - invalid object name - RC3"
);
like(
	$result->output,
	'/UNKNOWN - 1 plugins checked, 1 unknown \(invalid\) \[parse_objects_cache: unknown object type \"invalid\" - valid types are command,contact,contactgroup,host,hostgroup,service,timeperiod\]\n'.
	'\[ 1\] invalid/', 
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi object cache macros -------------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"@PERL@ ../check_multi $testopts -x 'command [ hostgroup_members ] = echo \$hostgroup:members:hostgroup_name:linux-servers\$' -x 'command [ services ] = echo \$service:service_description:host_name:localhost\$' -r 1+4 -s objects_cache=objects.cache",
);
is(
	$result->return_code, 
	0, 
	"object cache macro check - hostgroup and services - RC0"
);
like(
	$result->output,
	'/OK - 2 plugins checked, 2 ok\n'.
	'\[ 1\] hostgroup_members localhost\n'.
	'\[ 2\] services Current Load,Current Users,HTTP,PING,Root Partition,SSH,Swap Usage,Total Processes/',
	"output correct"
);
#-------------------------------------------------------------------------------
#--- check_multi object cache nested macros ------------------------------------
#-------------------------------------------------------------------------------
$result = NPTest->testCmd(
	"MULTI_TESTVAR='localhost'; export MULTI_TESTVAR; @PERL@ ../check_multi $testopts -x 'command [ services ] = echo \$service:service_description:host_name:\$TESTVAR\$\$' -r 1+4 -s objects_cache=objects.cache",
);
is(
	$result->return_code, 
	0, 
	"object cache macro check - nested macros - RC0"
);
like(
	$result->output,
	'/OK - 1 plugins checked, 1 ok\n'.
	'\[ 1\] services Current Load,Current Users,HTTP,PING,Root Partition,SSH,Swap Usage,Total Processes/',
	"output correct"
);
